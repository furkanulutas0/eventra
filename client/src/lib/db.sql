-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.event_dates
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    event_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    date date NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_dates_pkey PRIMARY KEY (id),
    CONSTRAINT event_dates_event_id_date_key UNIQUE (event_id, date)
);

CREATE TABLE IF NOT EXISTS public.event_participants
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    event_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id uuid NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    version integer DEFAULT 1,
    is_anonymous boolean DEFAULT false,
    email text COLLATE pg_catalog."default",
    CONSTRAINT event_participants_pkey PRIMARY KEY (id),
    CONSTRAINT event_participants_event_id_user_id_key UNIQUE (event_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.event_schedule
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    event_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    final_date date NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_schedule_pkey PRIMARY KEY (id),
    CONSTRAINT event_schedule_event_id_key UNIQUE (event_id)
);

CREATE TABLE IF NOT EXISTS public.event_time_slots
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    event_date_id uuid NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_time_slots_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.event_votes
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    event_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    voter_email text COLLATE pg_catalog."default",
    is_anonymous boolean DEFAULT false,
    voted_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_votes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.events
(
    id character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT uuid_generate_v4(),
    creator_id uuid NOT NULL,
    type character varying(10) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    detail text COLLATE pg_catalog."default",
    location character varying(255) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    share_url text COLLATE pg_catalog."default",
    is_anonymous_allowed boolean DEFAULT false,
    CONSTRAINT events_pkey PRIMARY KEY (id),
    CONSTRAINT events_share_url_key UNIQUE (share_url)
);

CREATE TABLE IF NOT EXISTS public.participant_availability
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    participant_id uuid NOT NULL,
    time_slot_id uuid NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    vote boolean,
    CONSTRAINT participant_availability_pkey PRIMARY KEY (id),
    CONSTRAINT participant_availability_participant_id_time_slot_id_key UNIQUE (participant_id, time_slot_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text COLLATE pg_catalog."default",
    surname text COLLATE pg_catalog."default",
    email text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    profile_url text COLLATE pg_catalog."default" DEFAULT 'https://static.vecteezy.com/system/resources/previews/009/292/244/non_2x/default-avatar-icon-of-social-media-user-vector.jpg'::text,
    updated_at timestamp without time zone DEFAULT now(),
    is_active boolean NOT NULL DEFAULT true,
    CONSTRAINT users_pkey PRIMARY KEY (uuid),
    CONSTRAINT users_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.event_dates
    ADD CONSTRAINT event_dates_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_participants
    ADD CONSTRAINT event_participants_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_event_participants_event_id
    ON public.event_participants(event_id);


ALTER TABLE IF EXISTS public.event_participants
    ADD CONSTRAINT event_participants_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS idx_event_participants_email
    ON public.event_participants(user_id);


ALTER TABLE IF EXISTS public.event_schedule
    ADD CONSTRAINT event_schedule_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS event_schedule_event_id_key
    ON public.event_schedule(event_id);


ALTER TABLE IF EXISTS public.event_time_slots
    ADD CONSTRAINT event_time_slots_event_date_id_fkey FOREIGN KEY (event_date_id)
    REFERENCES public.event_dates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.event_votes
    ADD CONSTRAINT event_votes_event_id_fkey FOREIGN KEY (event_id)
    REFERENCES public.events (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_creator_id_fkey FOREIGN KEY (creator_id)
    REFERENCES public.users (uuid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.participant_availability
    ADD CONSTRAINT participant_availability_participant_id_fkey FOREIGN KEY (participant_id)
    REFERENCES public.event_participants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_participant_availability_participant_id
    ON public.participant_availability(participant_id);


ALTER TABLE IF EXISTS public.participant_availability
    ADD CONSTRAINT participant_availability_time_slot_id_fkey FOREIGN KEY (time_slot_id)
    REFERENCES public.event_time_slots (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_participant_availability_time_slot
    ON public.participant_availability(time_slot_id);

END;